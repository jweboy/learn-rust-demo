fn main() {
    // ===================== 标量类型 =================
    // 整数
    // 如：u32 无符号的整数类型，占据32位空间
    // 无符号整数类型以 u 开头，有符号整数类型以 i 开头
    // 浮点
    // f32 32位 单精度 / f64 64位 双精度（默认类型）
    // 布尔
    // true / false 1个字节大小
    // 字符串
    // char 声明类型 / 4个字节大小 单引号

    let guest: u32 = "42".parse().expect("Invalid number");
    println!("{}", guest);

    // let outRangeNum: u8 = 322;

    let x = 3.2;
    let y: f32 = 3.2;

    let str: char = '🍔';

    // ===================== 复合类型 =================
    // Tuple 原组 长度固定
    let tup: (f32, u32, u8) = (1.8, 300, 200);

    // 索引访问
    println!("{}, {}, {}", tup.0, tup.1, tup.2);

    // 解构获取元素值
    let (x, y, z) = tup;
    println!("{}, {}, {}", x, y, z);

    // 数组 每个元素类型相同 长度固定 存在栈上
    let a = [1, 2, 3, 4, 5];

    // [类型;长度]
    let a = [3; 5]; // [3, 3, 3, 3, 3]
    println!("{:?}", a);

    // 索引超出，编译有时不报错，运行会 Panic
    // let b = a[8];
    // println!("{:?}", b);
}
